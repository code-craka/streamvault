name: 'Copilot Autofix & Code Review'

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: write
  pull-requests: write
  security-events: write # Required for CodeQL
  checks: write

jobs:
  # Job 1: More Accurate Code Review (using dedicated tools instead of grep)
  code-review:
    name: 'Code Review Analysis'
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: 'Install pnpm & Setup Node'
        uses: pnpm/action-setup@v4
        with:
          version: '10.15.0'
      - uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'

      - name: 'Install dependencies'
        run: pnpm install --frozen-lockfile

      # Step 1: Run CodeQL for accurate security analysis
      - name: 'Initialize CodeQL'
        uses: github/codeql-action/init@v3
        with:
          languages: 'javascript'

      - name: 'Autobuild'
        uses: github/codeql-action/autobuild@v3

      - name: 'Perform CodeQL Analysis'
        uses: github/codeql-action/analyze@v3

      # Step 2: Run Linters for accurate code quality analysis
      - name: 'Run Linters and Type Checker'
        run: |
          pnpm lint --format json --output-file lint-results.json || true
          pnpm type-check || echo "TypeScript errors found" > type-check-errors.txt

      # Step 3: Generate a combined, more accurate report
      - name: 'Generate AI Review Comment'
        id: generate-comment
        run: |
          echo "## 🤖 AI-Assisted Code Review" > comment.md
          echo "" >> comment.md
          echo "### 🔒 Security Analysis (via CodeQL):" >> comment.md
          # Links directly to the PR's security scan results tab
          echo "✅ CodeQL scan complete. [View security alerts for this PR](${{ github.server_url }}/${{ github.repository }}/security/code-scanning?query=pr%3A${{ github.event.pull_request.number }})" >> comment.md
          echo "" >> comment.md

          echo "### 🎯 Code Quality Analysis (via ESLint & TypeScript):" >> comment.md
          # Check for ESLint errors from the JSON output
          if [ -f "lint-results.json" ] && [ $(jq '.[0].errorCount' lint-results.json) -gt 0 ]; then
            echo "⚠️ **ESLint errors found.** Please fix them before merging." >> comment.md
          else
            echo "✅ No critical ESLint errors found." >> comment.md
          fi
          # Check if the TypeScript check created an error file
          if [ -f "type-check-errors.txt" ]; then
            echo "⚠️ **TypeScript errors detected.** Please run \`pnpm type-check\` locally to see details." >> comment.md
          fi
          echo "" >> comment.md

          echo "### 🎬 StreamVault Specific Reminders:" >> comment.md
          echo "- **Authentication**: Have you tested all user roles (\`viewer\`, \`streamer\`, \`admin\`)?" >> comment.md
          echo "- **Payments**: If you touched Stripe code, did you test the webhook signature?" >> comment.md
          echo "- **Storage**: Are new GCS interactions covered by security rules and signed URLs?" >> comment.md

      - name: 'Post Review Comment'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const commentBody = fs.readFileSync('comment.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            });

  # Job 2: Security Auto-fix for Dependencies
  security-autofix:
    name: 'Security Auto-fix (Dependencies)'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: 'Install pnpm & Setup Node'
        uses: pnpm/action-setup@v4
        with:
          version: '10.15.0'
      - uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'

      - name: 'Install dependencies'
        run: pnpm install --frozen-lockfile

      - name: 'Check for dependency vulnerabilities'
        id: audit
        run: |
          echo "Running security audit..."
          # Run audit and save output, ignoring exit code for now
          pnpm audit --audit-level high --json > audit-results.json || true
          # Check if the results file contains any vulnerabilities
          if jq -e '.vulnerabilities | length > 0' audit-results.json > /dev/null; then
            echo "vulnerabilities_found=true" >> $GITHUB_OUTPUT
          else
            echo "vulnerabilities_found=false" >> $GITHUB_OUTPUT
          fi

      - name: 'Auto-fix dependency vulnerabilities'
        id: autofix
        if: steps.audit.outputs.vulnerabilities_found == 'true'
        run: |
          echo "Attempting to auto-fix vulnerabilities..."
          pnpm audit --fix || true
          # Check if the lockfile was modified
          if git diff --quiet pnpm-lock.yaml; then
            echo "No auto-fixes were applied by pnpm."
            echo "fixes_applied=false" >> $GITHUB_OUTPUT
          else
            echo "Auto-fixes applied. Committing changes."
            echo "fixes_applied=true" >> $GITHUB_OUTPUT
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add pnpm-lock.yaml package.json
            git commit -m "fix(deps): auto-fix security vulnerabilities"
          fi

      - name: 'Push auto-fixes'
        if: steps.autofix.outputs.fixes_applied == 'true'
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.head_ref }}

  # Job 3: Code Style Auto-fix
  style-autofix:
    name: 'Code Style Auto-fix'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: 'Install pnpm & Setup Node'
        uses: pnpm/action-setup@v4
        with:
          version: '10.15.0'
      - uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'

      - name: 'Install dependencies'
        run: pnpm install --frozen-lockfile

      - name: 'Auto-fix code style'
        id: stylefix
        run: |
          echo "Applying code style fixes..."
          pnpm format
          if ! git diff --quiet; then
            echo "style_fixes_applied=true" >> $GITHUB_OUTPUT
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add .
            git commit -m "style: auto-fix code formatting"
          else
            echo "No style issues found."
            echo "style_fixes_applied=false" >> $GITHUB_OUTPUT
          fi

      - name: 'Push style fixes'
        if: steps.stylefix.outputs.style_fixes_applied == 'true'
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.head_ref }}
